plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

/*
configurations.all {
    resolutionStrategy {
        force("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")
    }
}
*/

repositories {
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }


    maven {
        name = "Ladysnake Mods"
        url = 'https://maven.ladysnake.org/releases'
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modImplementation 'software.bernie.geckolib:geckolib-fabric-1.19.3:4.0.6'

    //include modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:1.0.2+1.19.3")


    // Replace modImplementation with modApi if you expose components in your own API
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${rootProject.cca_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cca_version}"

    // Includes Cardinal Components API as a Jar-in-Jar dependency (optional but recommended)
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${rootProject.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cca_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
